package parserbidzaar

import (
	"sort"
	"strings"
	"tendertracker/internal/models"
	"tendertracker/internal/urlgen"
	"time"
)

func CreateUrl(config models.Config, name string, minPrice int) string {
	encoder := urlgen.NewURLEncoder("https://bidzaar.com/requests/public/buy")

	now := time.Now()
	twoYearsAgo := now.AddDate(-2, 0, 0)
	dateString := twoYearsAgo.Format("2006-01-02T15:04:05-07:00")

	url := encoder.
		AddParam("sorting.key", "publishDate").
		AddParam("sorting.direction", "desc").
		AddParam("logic", "and").
		AddParam("filters[3].operator", "gt").
		AddParam("filters[3].field", "publishDate").
		AddParam("filters[3].value", dateString).
		AddParam("filters[2].operator", "in").
		AddParam("filters[2].field", "status").
		AddParam("filters[2].value", getStatusFilter(config.ProcurementType)).
		AddParam("filters[1].operator", "any").
		AddParam("filters[1].field", "tags").
		AddParam("filters[1].value", getNameFilter(name)).
		AddParam("filters[0].operator", "any").
		AddParam("filters[0].field", "deliveryAddresses.search").
		AddParam("filters[0].value", getRegionsFromFederalDistricts(config.VentCustomerPlace))

	return url.Build()
}

func getStatusFilter(procType string) string {
	switch procType {
	case "active":
		return "[1]" // Активные закупки
	case "completed":
		return "[3]" // Завершенные закупки
	default:
		return "[1]"
	}
}

func getNameFilter(name string) string {
	switch name {
	case "doors":
		return "[металлические двери,противопожарные двери,алюминиевые окна и двери,окна и двери пвх,двери,входные двери,межкомнатные двери,монтаж противопожарных дверей,технические двери,стеклянные двери,раздвижные двери,деревянные двери,двери скрытого монтажа,автоматические двери,двери мдф,монтаж окон и дверей,взломостойкие двери,монтаж дверей,бронированные двери]"
	case "vent":
		return "[вентиляция и кондиционирование,вентиляция,монтаж систем вентиляции и кондиционирования,обслуживание кондиционеров и систем вентиляции,вентилятор осевой,вентилятор канальный]"
	case "build":
		return "[строительство зданий и сооружений,инженерное строительство,строительство ангаров,строительство складов,монолитное строительство,строительство домов,промышленное строительство,строительство жилых и нежилых зданий,капитальный ремонт]"
	case "metal":
		return "[изготовление металлоконструкций,изделия из металла,металлопрокат,металлообработка,металлоконструкции для производств,нержавеющий металлопрокат,цветной металлопрокат,металлоизделия на заказ,металлоконструкции для станционных сооружений,механическая обработка металла]"
	default:
		return "[]"
	}
}

func getRegionsFromFederalDistricts(districts []string) string {
	federalDistricts := map[string][]string{
		"OKER36": { // Дальневосточный федеральный округ
			"Амурская обл",
			"Еврейская автономная обл",
			"Камчатский край",
			"Магаданская обл",
			"Приморский край",
			"Республика Бурятия",
			"Республика Саха (Якутия)",
			"Сахалинская обл",
			"Хабаровский край",
			"Чукотский автономный округ",
		},
		"OKER33": { // Приволжский федеральный округ
			"Кировская обл",
			"Нижегородская обл",
			"Оренбургская обл",
			"Пензенская обл",
			"Пермский край",
			"Республика Башкортостан",
			"Республика Марий Эл",
			"Республика Мордовия",
			"Республика Татарстан",
			"Самарская обл",
			"Саратовская обл",
			"Удмуртская Республика",
			"Ульяновская обл",
			"Чувашская Республика",
		},
		"OKER31": { // Северо-Западный федеральный округ
			"Архангельская обл",
			"Вологодская обл",
			"Калининградская обл",
			"Ленинградская обл",
			"Мурманская обл",
			"Ненецкий автономный округ",
			"Новгородская обл",
			"Псковская обл",
			"Республика Карелия",
			"Республика Коми",
			"г. Санкт-Петербург",
		},
		"OKER38": { // Северо-Кавказский федеральный округ
			"Кабардино-Балкарская Республика",
			"Карачаево-Черкесская Республика",
			"Республика Дагестан",
			"Республика Ингушетия",
			"Республика Северная Осетия-Алания",
			"Ставропольский край",
			"Чеченская Республика",
		},
		"OKER35": { // Сибирский федеральный округ
			"Алтайский край",
			"Иркутская обл",
			"Кемеровская обл",
			"Красноярский край",
			"Новосибирская обл",
			"Омская обл",
			"Республика Алтай",
			"Республика Тыва",
			"Республика Хакасия",
			"Томская обл",
		},
		"OKER34": { // Уральский федеральный округ
			"Курганская обл",
			"Свердловская обл",
			"Тюменская обл",
			"Ханты-Мансийский автономный округ",
			"Челябинская обл",
			"Ямало-Ненецкий автономный округ",
		},
		"OKER30": { // Центральный федеральный округ
			"Белгородская обл",
			"Брянская обл",
			"Владимирская обл",
			"Воронежская обл",
			"Ивановская обл",
			"Калужская обл",
			"Костромская обл",
			"Курская обл",
			"Липецкая обл",
			"Московская обл",
			"Орловская обл",
			"Рязанская обл",
			"Смоленская обл",
			"Тамбовская обл",
			"Тверская обл",
			"Тульская обл",
			"Ярославская обл",
			"г. Москва",
		},
		"OKER37": { // Южный федеральный округ
			"Астраханская обл",
			"Волгоградская обл",
			"Краснодарский край",
			"Республика Адыгея",
			"Республика Калмыкия",
			"Республика Крым",
			"Ростовская обл",
			"г. Севастополь",
		},
	}

	// Собираем все уникальные регионы
	regionsSet := make(map[string]bool)
	for _, district := range districts {
		if regions, exists := federalDistricts[district]; exists {
			for _, region := range regions {
				regionsSet[region] = true
			}
		}
	}

	// Преобразуем в слайс и сортируем для стабильности
	regions := make([]string, 0, len(regionsSet))
	for region := range regionsSet {
		regions = append(regions, region)
	}
	sort.Strings(regions)

	// Форматируем в строку для URL
	result := make([]string, len(regions))
	for i, region := range regions {
		result[i] = "Россия, " + region
	}

	return strings.Join(result, ";")
}
